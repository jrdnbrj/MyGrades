GIT

git clone <url github> // va a clonar el repositorio de github a la ubicación de la consola

git init // empezar proyecto, se crea área staging, se crea repositorio y archivo '/.git/'
git add <nombrearchivo> // agrega archivo localmente
git add . // agrega todo los archivos a staging en memoria RAM

git commit -m "mensaje" //primera foto del proyecto
git commit // i ESC :wq ENTER

git config --global user.email "email" // registra el correo del autor
git config --global user.name "nombre" //registra nombre del autor

git status //ver el estado de los archivos

git log // ver los commits
git log --stat // ver commits con cambios especificos
git log --oneline --decorate --all --graph // muestra los commit mas bonito jaja
git config --global alias.lodag 'log --online --decorate --all --grap' // crea un alias
// "git log --oneline --decorate -all --graph" = "git lodag" // ahora esos dos comandos hacen lo mismo por el alias
git config --global --get-regexp alias // muestra los alias existentes
git config --global --unset alias.lodag // elimina el alias 'lodag'

git remote // indica la ubicacion remota
git remote add origin <link github> //accede al repositorio web
git remote -v // muestra la url de los repositorios

git push -u origin master //sube los archivos al repositorio, pedirá acceso a la cuenta la primera vez

git checkout -- <archivo> // obtener archivos de un rama o commit

git fetch // Bajar cambios del repositorio a uno oculto a la rama origin/master
git merge origin/master // para pasar a la rama master
git pull // git fetch + git merge
git pull origin master --allow-unrelated-histories // pull con las historia de la ubicacion remote

git branch // muestra todas las ramas existentes y la que se muestra actualmente
git branch hola // crea rama "hola"
git checkout hola // cambia a la rama "hola"
git checkout -b chao // crea la rama "chao" y cambia a esa rama
git branch -m hola holamundo // cambia el nombre de la rama de "hola" a "holamundo"
git branch -m holamundo // elimina la rama "holamundo"

git merge hola // para pasar cambios a master, previamente hay que cambiarse a la rama master


*Cuando se genera un README antes de hacer PUSH, y se intenta hacer PUSH, 
 puede dar un error, esta puede ser la solución*

git pull --rebase origin master // pone los commits encima de los cambios recién extraídos
git add .
git commit -m "cmtmsg"
git push -u origin master
*


git rm --cached <nombre_archivo> // elimina el archivo de staging, no elimina el archivo del directorio
git rm --force <nombre_archivo> // elimina el archivo de staging y del disco duro
git config --list // configuraciones por defecto en git (--list = -l)
git config --list --show-origin // ubicacion de la configuraciones guardadas
-- // inidca que se usará una palabra como parametro
- indica que se usaran letras como parametros
git show <nombre_archivo> // muestra los cambios del archivo
git diff // muestra los cambios del repositorio actual y staging
git diff <codigo_commit_1> <codigo_commit_2> // muestra las diferencias del commit 2 con respecto al commit 1, el orden importa
git reset --soft // saca archivos modificados del staging
git reset --hard // borra todos los cambios
git reset <codigo_commit> --hard // vuelve a la version del commit, eliminando los commit de intermedio
git reset <codigo_commit> --soft // lo mismo pero mantiene el staging intacto
git reset HEAD <nombre_archivo> // saca los archivos del staging, opuesto de git add
git checkout <codigo_commit> history.txt // cambia el archivo actual por el del commit
// #git rm --cached <nombre_archivo>  y  #git reset head  hacen lo mismo, rm es para un solo archivo, head para para todos los archivos
git commit -am "msg" // git add + git commit, pero no pondrá en staging los archivos nuevos
ssh-keygen -t rsa -b 4096 -C "www.jrdnbrj@hotmail.com" // generas llaves publicas y privadas
eval $(ssh-agent -s) // evaluar que ssh está corriendo
ssh-add ~/.ssh/id_rsa // agregar llave privada a la configuración con ubicacion de llave publica
git remote set-url origin git@github.com:jrdnbrj/MyGrades.git // cambia la url del repositorio
git tag -a v0.1 -m "Prototipo Funcional 2" <codigo_commit> // agrega un tag/version al commit
git tag // ver los tags existentes
git show-ref --tags // muestra los commits a los cuales estan asociados los tags
git push origin --tags // enviar a github los tags
git tag -d <nombre_tag> // eliminar tag (no se borra inmediatamente de GitHub)
git push origin :refs/tags/v0.1 // bottar tag de GitHub
git show-branch // muestras las ramas con sus ultimos commits
git show-branch --all // muestra las ramas con sus ultimos commits pero mas especifico
gitk //  abre una interfaz gráfica para ver la historia de commits y ramas
https://pandao.github.io/editor.md/en.html // pagina para hacer readme's
imgur.com // alojar imagenes para sitio web gratis
git rebase <nombre_rama> // une ramas borrando la historia de la rama de origen si no es master, mala práctica
git branch -D <nombre_rama> // elimina la rama
git stash // se guarda todo el avance que no se ha commiteado temporalmente, directorio se actualiza al ultimo commit
git stash list // se listan los stash guardados
git stash pop // borra el stash guardado y lo pone en el repositorio
git stash branch <nombre_rama> // pone los cambios de stash en nueva rama
git stash drop // elimina el stash guardado
git clean --dry-run // indica los archivos no trackeados que serán borrados sin borrarlos
git clean -f // borra los archivos no trackeados
git cherry-pick <codigo_commit> // fusion del commit con la rama actual
git commit --amend // reconstruir ultimo commit con nuevos cambios
git reflog // historial completo localmente, hacer push al repositorio no hacer una copia de seguridad de todo lo que tiene git
git grep <string_a_buscar> // devuelve ubicacion y el string que buscó, con commilas en caso de syntax error
git grep -n <string_a_buscar> // devuelve ubicacion y el string que buscó en la linea que encontró
git grep -c <string_a_buscar> // devuelve ubicacion y la cantidad de veces que encontró el string
git log -S <string_a_buscar> // muestra todas las veces que el string tuvo que ver por commits
// grep para buscar en archivos, log para buscar en commits
git shortlog // indica los commits de cada autor
git shortlog -sn // enumera los commits por autor
git shortlog -sn --all // enumera todos los commit por autor, incluso los commits eliminados
git shortlog -sn --all --no-merges // enumera todos los commit por autor, excluyendo los merge
git blame <nombre_archivo> // muestra los cambios (commit, autor, etc) por cada linea, parametro (-c) para mas bonito
git blame -c <nombre_archivo> -L50,100// lo mismo pero desde la linea 50 hasta la 100
git branch -r // ver ramas remotas
git branch -a // ver ramas locales y remotas



